package day09;

import java.util.Stack;

/**
 * Created by HWOLF on 2017/3/25.
 */
/*

搭积木

小明最近喜欢搭数字积木，
一共有10块积木，每个积木上有一个数字，0~9。

搭积木规则：
每个积木放到其它两个积木的上面，并且一定比下面的两个积木数字小。
最后搭成4层的金字塔形，必须用完所有的积木。

下面是两种合格的搭法：

   0
  1 2
 3 4 5
6 7 8 9

   0
  3 1
 7 5 2
9 8 6 4

请你计算这样的搭法一共有多少种？

请填表示总数目的数字。
注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。

 */
public class Building_blocks {
    static int count = 0;

    public static void main(String[] args) {
        int[] a = new int[10];
        boolean[] visit = new boolean[10];
        dfs(0, visit, a);
        System.out.println(count);
    }

    public static void dfs(int num, boolean[] visit, int[] a) {
        if (num == 10) {
            if (visit(a)) {
                count++;
            }
            return;
        }
        for (a[num] = 0; a[num] < 10; a[num]++) {
            if (!visit[a[num]]) {
                visit[a[num]] = true;
                dfs(num+1, visit, a);
                num = num - 1;
                visit[a[num]] = false;
            } else {
                continue;
            }
        }
    }

    private static boolean visit(int[] a) {
        if (a[0] < a[1] && a[0] < a[2] && a[1] < a[3] && a[1] < a[4]
                && a[2] < a[4] && a[2] < a[5] && a[3] < a[6] && a[3] < a[7]
                && a[4] < a[7] && a[4] < a[8] && a[5] < a[8] && a[5] < a[9]) {
            return true;
        } else {
            return false;
        }
    }
}
